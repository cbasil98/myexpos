
alias userSP R0;
userSP = SP;
alias physicalPageNum R1;
alias offset R2;
alias fileName R3;
physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
offset = (userSP - 4) % 512;
fileName= [(physicalPageNum * 512) + offset];

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;
SP=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11]*512-1;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9]=9;
alias inodeRegister R4;



inodeRegister=0;
while(inodeRegister<MAX_FILE_NUM)do
    if([INODE_TABLE + inodeRegister*16 + 1]==fileName && [INODE_TABLE + inodeRegister*16 + 0]==3)then
        
        R2=[SYSTEM_STATUS_TABLE+1];
        multipush(R0,R1,R2,R3,R4);
        R1=3;
        R2=[SYSTEM_STATUS_TABLE+1];
        call MOD_1;
        
        multipop(R0,R1,R2,R3,R4);
        R1=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11];
        [MEMORY_FREE_LIST + R1] = [MEMORY_FREE_LIST + R1]+1;
        [SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1;
        SP=R1*512-1;
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 4]=RUNNING;
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 7]=inodeRegister;
        PTBR=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 14];
        //Library
        [PTBR+0] = 63;
        [PTBR+1] = "0100";
        [PTBR+2] = 64;
        [PTBR+3] = "0100";

        
        //Heap
        multipush(R0,R1,R2,R3,R4);
        R1=1;
        call MOD_2;
        breakpoint;
        [PTBR+4] = R0;
        [PTBR+5] = "0110";
        R1=1;
        call MOD_2;
        [PTBR+6] = R0;
        [PTBR+7] = "0110";
        
        
        //Stack
        R1=1;
        call MOD_2;
        [PTBR+16] = R0;
        [PTBR+17] = "0110";
        R1=1;
        call MOD_2;
        [PTBR+18] = R0;
        [PTBR+19] = "0110";
        multipop(R0,R1,R2,R3,R4);

        R5= [INODE_TABLE+inodeRegister*16+2];
        R5=R5/512;
        R6=0;
        while(R6<=R5)do
            //Code
            multipush(R0,R1,R2,R3,R4,R5,R6);
            R1=1;
            call MOD_2;
            R7=R0;
            multipop(R1,R2,R3,R4,R5,R6);
            [PTBR+R6*2+8] = R7;
            [PTBR+R6*2+9] = "0100";
            
            multipush(R1,R2,R3,R4,R5,R6,R7);
            R1=2;
            R2= [SYSTEM_STATUS_TABLE + 1];
            R3=R7;
            R4=[INODE_TABLE+16*inodeRegister+8+R6];
            breakpoint;
            call MOD_4;
            multipop(R1,R2,R3,R4,R5,R6,R7);
            
            R6=R6+1;
        endwhile;
        
        [[PTBR + 16]*512] = [[PTBR + 8]*512+1];
        SP=8*512;
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9]=0;
        ireturn;
    endif;
    inodeRegister=inodeRegister+1;
endwhile;

[([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)]=-1;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9]=0;
SP=userSP;
ireturn;